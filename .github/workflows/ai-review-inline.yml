name: AI Code Review Inline (Ollama with Cache)

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # ambil semua commit untuk diff

    - name: Get PR diff with line numbers
      run: |
        git fetch origin ${{ github.base_ref }} ${{ github.head_ref }}
        git diff --unified=0 origin/${{ github.base_ref }}...origin/${{ github.head_ref }} > pr_diff.txt
        echo "=== DIFF ==="
        cat pr_diff.txt

    - name: Cache Ollama models
      uses: actions/cache@v4
      with:
        path: ~/.ollama
        key: ollama-model-codellama-7b

    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.com/install.sh | sh
        ollama serve & sleep 5

    - name: Pull LLM model (only if not cached)
      run: |
        if [ ! -f ~/.ollama/models/manifests/registry.ollama.ai/library/codellama:7b ]; then
          ollama pull codellama:7b
        else
          echo "Model codellama:7b sudah ada di cache"
        fi

    - name: Run AI review with JSON output
      run: |
        DIFF_CONTENT=$(head -c 4000 pr_diff.txt)
        PROMPT="You are a senior software engineer reviewing a GitHub Pull Request.
        Output must be in JSON array format ONLY, like this:
        [{\"file\":\"src/main/java/App.java\",\"line\":10,\"comment\":\"Consider using try-with-resources for better resource management.\"}]
        Do not include anything else besides valid JSON.
        Review this diff:\n\n$DIFF_CONTENT"


        PROMPT="You are an expert code reviewer specializing in memory leak detection. Analyze the provided code changes for potential memory leaks.
        Focus on these patterns:
        **Java:**
        - Unclosed resources (streams, connections, readers/writers)
        - Static collections that grow indefinitely
        - Event listeners not removed
        - Thread pools not shut down
        - Circular references
        - Large object retention

        **Go:**
        - Goroutine leaks (infinite loops, blocked channels)
        - Unclosed channels
        - Defer statements missing
        - Circular references in structs
        - Large slice/map retention

        Provide specific line numbers and actionable suggestions.
        Output must be in JSON array format ONLY, like this:
        [{\"file\":\"src/main/java/App.java\",\"line\":10,\"comment\":\"Consider using try-with-resources for better resource management.\"}]
        Do not include anything else besides valid JSON.
        Review this diff:\n\n$DIFF_CONTENT"


        ollama run codellama:7b "$PROMPT" > raw_review.txt
        # Pastikan output JSON valid, kalau gagal bikin array kosong
        cat raw_review.txt | jq . > review.json || echo "[]" > review.json
        echo "=== AI INLINE REVIEW JSON ==="
        cat review.json

    - name: Post inline comments to PR
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const comments = JSON.parse(fs.readFileSync('review.json', 'utf8'));
          for (const c of comments) {
            try {
              await github.rest.pulls.createReviewComment({
                owner: context.repo.owner,
                repo: context.repo.name,
                pull_number: context.payload.pull_request.number,
                body: `ðŸ¤– AI Suggestion:\n${c.comment}`,
                commit_id: context.payload.pull_request.head.sha,
                path: c.file,
                line: c.line,
                side: "RIGHT"
              });
            } catch (err) {
              console.log("Failed to comment:", err.message);
            }
          }
